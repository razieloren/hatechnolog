/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: courses/api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./helpers";
import * as pb_1 from "google-protobuf";
export namespace messages {
    export class GetCoursesTeasersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetCoursesTeasersRequest {
            const message = new GetCoursesTeasersRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCoursesTeasersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCoursesTeasersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCoursesTeasersRequest {
            return GetCoursesTeasersRequest.deserialize(bytes);
        }
    }
    export class GetCoursesTeasersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teasers?: dependency_1.messages.CourseTeaser[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teasers" in data && data.teasers != undefined) {
                    this.teasers = data.teasers;
                }
            }
        }
        get teasers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.messages.CourseTeaser, 1) as dependency_1.messages.CourseTeaser[];
        }
        set teasers(value: dependency_1.messages.CourseTeaser[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            teasers?: ReturnType<typeof dependency_1.messages.CourseTeaser.prototype.toObject>[];
        }): GetCoursesTeasersResponse {
            const message = new GetCoursesTeasersResponse({});
            if (data.teasers != null) {
                message.teasers = data.teasers.map(item => dependency_1.messages.CourseTeaser.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                teasers?: ReturnType<typeof dependency_1.messages.CourseTeaser.prototype.toObject>[];
            } = {};
            if (this.teasers != null) {
                data.teasers = this.teasers.map((item: dependency_1.messages.CourseTeaser) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.teasers.length)
                writer.writeRepeatedMessage(1, this.teasers, (item: dependency_1.messages.CourseTeaser) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCoursesTeasersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCoursesTeasersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teasers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.messages.CourseTeaser.deserialize(reader), dependency_1.messages.CourseTeaser));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCoursesTeasersResponse {
            return GetCoursesTeasersResponse.deserialize(bytes);
        }
    }
    export class GetCourseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            slug?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("slug" in data && data.slug != undefined) {
                    this.slug = data.slug;
                }
            }
        }
        get slug() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set slug(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            slug?: string;
        }): GetCourseRequest {
            const message = new GetCourseRequest({});
            if (data.slug != null) {
                message.slug = data.slug;
            }
            return message;
        }
        toObject() {
            const data: {
                slug?: string;
            } = {};
            if (this.slug != null) {
                data.slug = this.slug;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.slug.length)
                writer.writeString(1, this.slug);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCourseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCourseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.slug = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCourseRequest {
            return GetCourseRequest.deserialize(bytes);
        }
    }
    export class GetCourseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            details?: dependency_1.messages.CourseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
        }
        get details() {
            return pb_1.Message.getWrapperField(this, dependency_1.messages.CourseDetails, 1) as dependency_1.messages.CourseDetails;
        }
        set details(value: dependency_1.messages.CourseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_details() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            details?: ReturnType<typeof dependency_1.messages.CourseDetails.prototype.toObject>;
        }): GetCourseResponse {
            const message = new GetCourseResponse({});
            if (data.details != null) {
                message.details = dependency_1.messages.CourseDetails.fromObject(data.details);
            }
            return message;
        }
        toObject() {
            const data: {
                details?: ReturnType<typeof dependency_1.messages.CourseDetails.prototype.toObject>;
            } = {};
            if (this.details != null) {
                data.details = this.details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_details)
                writer.writeMessage(1, this.details, () => this.details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCourseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCourseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.details, () => message.details = dependency_1.messages.CourseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCourseResponse {
            return GetCourseResponse.deserialize(bytes);
        }
    }
}
