/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: courses/helpers.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace messages {
    export class CourseTeaser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            slug?: string;
            title?: string;
            main_video_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("slug" in data && data.slug != undefined) {
                    this.slug = data.slug;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("main_video_id" in data && data.main_video_id != undefined) {
                    this.main_video_id = data.main_video_id;
                }
            }
        }
        get slug() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set slug(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get main_video_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set main_video_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            slug?: string;
            title?: string;
            main_video_id?: string;
        }): CourseTeaser {
            const message = new CourseTeaser({});
            if (data.slug != null) {
                message.slug = data.slug;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.main_video_id != null) {
                message.main_video_id = data.main_video_id;
            }
            return message;
        }
        toObject() {
            const data: {
                slug?: string;
                title?: string;
                main_video_id?: string;
            } = {};
            if (this.slug != null) {
                data.slug = this.slug;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.main_video_id != null) {
                data.main_video_id = this.main_video_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.slug.length)
                writer.writeString(1, this.slug);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.main_video_id.length)
                writer.writeString(3, this.main_video_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CourseTeaser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CourseTeaser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.slug = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.main_video_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CourseTeaser {
            return CourseTeaser.deserialize(bytes);
        }
    }
    export class CourseDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teaser?: CourseTeaser;
            description?: string;
            playlist_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teaser" in data && data.teaser != undefined) {
                    this.teaser = data.teaser;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("playlist_id" in data && data.playlist_id != undefined) {
                    this.playlist_id = data.playlist_id;
                }
            }
        }
        get teaser() {
            return pb_1.Message.getWrapperField(this, CourseTeaser, 1) as CourseTeaser;
        }
        set teaser(value: CourseTeaser) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_teaser() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get playlist_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set playlist_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            teaser?: ReturnType<typeof CourseTeaser.prototype.toObject>;
            description?: string;
            playlist_id?: string;
        }): CourseDetails {
            const message = new CourseDetails({});
            if (data.teaser != null) {
                message.teaser = CourseTeaser.fromObject(data.teaser);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.playlist_id != null) {
                message.playlist_id = data.playlist_id;
            }
            return message;
        }
        toObject() {
            const data: {
                teaser?: ReturnType<typeof CourseTeaser.prototype.toObject>;
                description?: string;
                playlist_id?: string;
            } = {};
            if (this.teaser != null) {
                data.teaser = this.teaser.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.playlist_id != null) {
                data.playlist_id = this.playlist_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_teaser)
                writer.writeMessage(1, this.teaser, () => this.teaser.serialize(writer));
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.playlist_id.length)
                writer.writeString(3, this.playlist_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CourseDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CourseDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teaser, () => message.teaser = CourseTeaser.deserialize(reader));
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.playlist_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CourseDetails {
            return CourseDetails.deserialize(bytes);
        }
    }
}
