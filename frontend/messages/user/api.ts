/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: user/api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace messages {
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            handle?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
            }
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _handle() {
            const cases: {
                [index: number]: "none" | "handle";
            } = {
                0: "none",
                1: "handle"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            handle?: string;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.handle != null) {
                message.handle = data.handle;
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: string;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeString(1, this.handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.handle = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[9], [10], [11], [12], [13], [14]];
        constructor(data?: any[] | ({
            handle?: string;
            karma?: number;
            plan?: string;
            avatar_url?: string;
            plan_since?: dependency_1.google.protobuf.Timestamp;
            member_since?: dependency_1.google.protobuf.Timestamp;
            is_supporter?: boolean;
            is_vip?: boolean;
        } & (({
            github_username?: string;
        }) | ({
            tac_acceptance_date?: dependency_1.google.protobuf.Timestamp;
        }) | ({
            allow_marketing_emails?: boolean;
        }) | ({
            allow_weekly_digest_emails?: boolean;
        }) | ({
            mfa_enabled?: boolean;
        }) | ({
            email_verified?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("karma" in data && data.karma != undefined) {
                    this.karma = data.karma;
                }
                if ("plan" in data && data.plan != undefined) {
                    this.plan = data.plan;
                }
                if ("avatar_url" in data && data.avatar_url != undefined) {
                    this.avatar_url = data.avatar_url;
                }
                if ("plan_since" in data && data.plan_since != undefined) {
                    this.plan_since = data.plan_since;
                }
                if ("member_since" in data && data.member_since != undefined) {
                    this.member_since = data.member_since;
                }
                if ("is_supporter" in data && data.is_supporter != undefined) {
                    this.is_supporter = data.is_supporter;
                }
                if ("is_vip" in data && data.is_vip != undefined) {
                    this.is_vip = data.is_vip;
                }
                if ("github_username" in data && data.github_username != undefined) {
                    this.github_username = data.github_username;
                }
                if ("tac_acceptance_date" in data && data.tac_acceptance_date != undefined) {
                    this.tac_acceptance_date = data.tac_acceptance_date;
                }
                if ("allow_marketing_emails" in data && data.allow_marketing_emails != undefined) {
                    this.allow_marketing_emails = data.allow_marketing_emails;
                }
                if ("allow_weekly_digest_emails" in data && data.allow_weekly_digest_emails != undefined) {
                    this.allow_weekly_digest_emails = data.allow_weekly_digest_emails;
                }
                if ("mfa_enabled" in data && data.mfa_enabled != undefined) {
                    this.mfa_enabled = data.mfa_enabled;
                }
                if ("email_verified" in data && data.email_verified != undefined) {
                    this.email_verified = data.email_verified;
                }
            }
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get karma() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set karma(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get plan() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set plan(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get plan_since() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set plan_since(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_plan_since() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get member_since() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set member_since(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_member_since() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get is_supporter() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_supporter(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get is_vip() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_vip(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get github_username() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set github_username(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
        }
        get has_github_username() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get tac_acceptance_date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set tac_acceptance_date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[1], value);
        }
        get has_tac_acceptance_date() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get allow_marketing_emails() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set allow_marketing_emails(value: boolean) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[2], value);
        }
        get has_allow_marketing_emails() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get allow_weekly_digest_emails() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set allow_weekly_digest_emails(value: boolean) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[3], value);
        }
        get has_allow_weekly_digest_emails() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get mfa_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set mfa_enabled(value: boolean) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[4], value);
        }
        get has_mfa_enabled() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get email_verified() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set email_verified(value: boolean) {
            pb_1.Message.setOneofField(this, 14, this.#one_of_decls[5], value);
        }
        get has_email_verified() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get _github_username() {
            const cases: {
                [index: number]: "none" | "github_username";
            } = {
                0: "none",
                9: "github_username"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _tac_acceptance_date() {
            const cases: {
                [index: number]: "none" | "tac_acceptance_date";
            } = {
                0: "none",
                10: "tac_acceptance_date"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _allow_marketing_emails() {
            const cases: {
                [index: number]: "none" | "allow_marketing_emails";
            } = {
                0: "none",
                11: "allow_marketing_emails"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _allow_weekly_digest_emails() {
            const cases: {
                [index: number]: "none" | "allow_weekly_digest_emails";
            } = {
                0: "none",
                12: "allow_weekly_digest_emails"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _mfa_enabled() {
            const cases: {
                [index: number]: "none" | "mfa_enabled";
            } = {
                0: "none",
                13: "mfa_enabled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _email_verified() {
            const cases: {
                [index: number]: "none" | "email_verified";
            } = {
                0: "none",
                14: "email_verified"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14])];
        }
        static fromObject(data: {
            handle?: string;
            karma?: number;
            plan?: string;
            avatar_url?: string;
            plan_since?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            member_since?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            is_supporter?: boolean;
            is_vip?: boolean;
            github_username?: string;
            tac_acceptance_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            allow_marketing_emails?: boolean;
            allow_weekly_digest_emails?: boolean;
            mfa_enabled?: boolean;
            email_verified?: boolean;
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.karma != null) {
                message.karma = data.karma;
            }
            if (data.plan != null) {
                message.plan = data.plan;
            }
            if (data.avatar_url != null) {
                message.avatar_url = data.avatar_url;
            }
            if (data.plan_since != null) {
                message.plan_since = dependency_1.google.protobuf.Timestamp.fromObject(data.plan_since);
            }
            if (data.member_since != null) {
                message.member_since = dependency_1.google.protobuf.Timestamp.fromObject(data.member_since);
            }
            if (data.is_supporter != null) {
                message.is_supporter = data.is_supporter;
            }
            if (data.is_vip != null) {
                message.is_vip = data.is_vip;
            }
            if (data.github_username != null) {
                message.github_username = data.github_username;
            }
            if (data.tac_acceptance_date != null) {
                message.tac_acceptance_date = dependency_1.google.protobuf.Timestamp.fromObject(data.tac_acceptance_date);
            }
            if (data.allow_marketing_emails != null) {
                message.allow_marketing_emails = data.allow_marketing_emails;
            }
            if (data.allow_weekly_digest_emails != null) {
                message.allow_weekly_digest_emails = data.allow_weekly_digest_emails;
            }
            if (data.mfa_enabled != null) {
                message.mfa_enabled = data.mfa_enabled;
            }
            if (data.email_verified != null) {
                message.email_verified = data.email_verified;
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: string;
                karma?: number;
                plan?: string;
                avatar_url?: string;
                plan_since?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                member_since?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                is_supporter?: boolean;
                is_vip?: boolean;
                github_username?: string;
                tac_acceptance_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                allow_marketing_emails?: boolean;
                allow_weekly_digest_emails?: boolean;
                mfa_enabled?: boolean;
                email_verified?: boolean;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.karma != null) {
                data.karma = this.karma;
            }
            if (this.plan != null) {
                data.plan = this.plan;
            }
            if (this.avatar_url != null) {
                data.avatar_url = this.avatar_url;
            }
            if (this.plan_since != null) {
                data.plan_since = this.plan_since.toObject();
            }
            if (this.member_since != null) {
                data.member_since = this.member_since.toObject();
            }
            if (this.is_supporter != null) {
                data.is_supporter = this.is_supporter;
            }
            if (this.is_vip != null) {
                data.is_vip = this.is_vip;
            }
            if (this.github_username != null) {
                data.github_username = this.github_username;
            }
            if (this.tac_acceptance_date != null) {
                data.tac_acceptance_date = this.tac_acceptance_date.toObject();
            }
            if (this.allow_marketing_emails != null) {
                data.allow_marketing_emails = this.allow_marketing_emails;
            }
            if (this.allow_weekly_digest_emails != null) {
                data.allow_weekly_digest_emails = this.allow_weekly_digest_emails;
            }
            if (this.mfa_enabled != null) {
                data.mfa_enabled = this.mfa_enabled;
            }
            if (this.email_verified != null) {
                data.email_verified = this.email_verified;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.handle.length)
                writer.writeString(1, this.handle);
            if (this.karma != 0)
                writer.writeUint32(2, this.karma);
            if (this.plan.length)
                writer.writeString(3, this.plan);
            if (this.avatar_url.length)
                writer.writeString(4, this.avatar_url);
            if (this.has_plan_since)
                writer.writeMessage(5, this.plan_since, () => this.plan_since.serialize(writer));
            if (this.has_member_since)
                writer.writeMessage(6, this.member_since, () => this.member_since.serialize(writer));
            if (this.is_supporter != false)
                writer.writeBool(7, this.is_supporter);
            if (this.is_vip != false)
                writer.writeBool(8, this.is_vip);
            if (this.has_github_username)
                writer.writeString(9, this.github_username);
            if (this.has_tac_acceptance_date)
                writer.writeMessage(10, this.tac_acceptance_date, () => this.tac_acceptance_date.serialize(writer));
            if (this.has_allow_marketing_emails)
                writer.writeBool(11, this.allow_marketing_emails);
            if (this.has_allow_weekly_digest_emails)
                writer.writeBool(12, this.allow_weekly_digest_emails);
            if (this.has_mfa_enabled)
                writer.writeBool(13, this.mfa_enabled);
            if (this.has_email_verified)
                writer.writeBool(14, this.email_verified);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.handle = reader.readString();
                        break;
                    case 2:
                        message.karma = reader.readUint32();
                        break;
                    case 3:
                        message.plan = reader.readString();
                        break;
                    case 4:
                        message.avatar_url = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.plan_since, () => message.plan_since = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.member_since, () => message.member_since = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.is_supporter = reader.readBool();
                        break;
                    case 8:
                        message.is_vip = reader.readBool();
                        break;
                    case 9:
                        message.github_username = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.tac_acceptance_date, () => message.tac_acceptance_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        message.allow_marketing_emails = reader.readBool();
                        break;
                    case 12:
                        message.allow_weekly_digest_emails = reader.readBool();
                        break;
                    case 13:
                        message.mfa_enabled = reader.readBool();
                        break;
                    case 14:
                        message.email_verified = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
}
