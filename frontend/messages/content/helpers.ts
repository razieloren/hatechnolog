/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: content/helpers.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace messages {
    export class ContentTeaser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            slug?: string;
            title?: string;
            author?: string;
            category?: string;
            monetized?: boolean;
            upvotes?: number;
            published?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("slug" in data && data.slug != undefined) {
                    this.slug = data.slug;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("monetized" in data && data.monetized != undefined) {
                    this.monetized = data.monetized;
                }
                if ("upvotes" in data && data.upvotes != undefined) {
                    this.upvotes = data.upvotes;
                }
                if ("published" in data && data.published != undefined) {
                    this.published = data.published;
                }
            }
        }
        get slug() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set slug(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get author() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get monetized() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set monetized(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get upvotes() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set upvotes(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get published() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set published(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_published() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            slug?: string;
            title?: string;
            author?: string;
            category?: string;
            monetized?: boolean;
            upvotes?: number;
            published?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): ContentTeaser {
            const message = new ContentTeaser({});
            if (data.slug != null) {
                message.slug = data.slug;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.monetized != null) {
                message.monetized = data.monetized;
            }
            if (data.upvotes != null) {
                message.upvotes = data.upvotes;
            }
            if (data.published != null) {
                message.published = dependency_1.google.protobuf.Timestamp.fromObject(data.published);
            }
            return message;
        }
        toObject() {
            const data: {
                slug?: string;
                title?: string;
                author?: string;
                category?: string;
                monetized?: boolean;
                upvotes?: number;
                published?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.slug != null) {
                data.slug = this.slug;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.monetized != null) {
                data.monetized = this.monetized;
            }
            if (this.upvotes != null) {
                data.upvotes = this.upvotes;
            }
            if (this.published != null) {
                data.published = this.published.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.slug.length)
                writer.writeString(1, this.slug);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.author.length)
                writer.writeString(3, this.author);
            if (this.category.length)
                writer.writeString(4, this.category);
            if (this.monetized != false)
                writer.writeBool(5, this.monetized);
            if (this.upvotes != 0)
                writer.writeUint32(6, this.upvotes);
            if (this.has_published)
                writer.writeMessage(7, this.published, () => this.published.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentTeaser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentTeaser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.slug = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.author = reader.readString();
                        break;
                    case 4:
                        message.category = reader.readString();
                        break;
                    case 5:
                        message.monetized = reader.readBool();
                        break;
                    case 6:
                        message.upvotes = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.published, () => message.published = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentTeaser {
            return ContentTeaser.deserialize(bytes);
        }
    }
    export class ContentDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teaser?: ContentTeaser;
            ltr?: boolean;
            compressed_content?: Uint8Array;
            edited?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teaser" in data && data.teaser != undefined) {
                    this.teaser = data.teaser;
                }
                if ("ltr" in data && data.ltr != undefined) {
                    this.ltr = data.ltr;
                }
                if ("compressed_content" in data && data.compressed_content != undefined) {
                    this.compressed_content = data.compressed_content;
                }
                if ("edited" in data && data.edited != undefined) {
                    this.edited = data.edited;
                }
            }
        }
        get teaser() {
            return pb_1.Message.getWrapperField(this, ContentTeaser, 1) as ContentTeaser;
        }
        set teaser(value: ContentTeaser) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_teaser() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ltr() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set ltr(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get compressed_content() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set compressed_content(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get edited() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set edited(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_edited() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            teaser?: ReturnType<typeof ContentTeaser.prototype.toObject>;
            ltr?: boolean;
            compressed_content?: Uint8Array;
            edited?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): ContentDetails {
            const message = new ContentDetails({});
            if (data.teaser != null) {
                message.teaser = ContentTeaser.fromObject(data.teaser);
            }
            if (data.ltr != null) {
                message.ltr = data.ltr;
            }
            if (data.compressed_content != null) {
                message.compressed_content = data.compressed_content;
            }
            if (data.edited != null) {
                message.edited = dependency_1.google.protobuf.Timestamp.fromObject(data.edited);
            }
            return message;
        }
        toObject() {
            const data: {
                teaser?: ReturnType<typeof ContentTeaser.prototype.toObject>;
                ltr?: boolean;
                compressed_content?: Uint8Array;
                edited?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.teaser != null) {
                data.teaser = this.teaser.toObject();
            }
            if (this.ltr != null) {
                data.ltr = this.ltr;
            }
            if (this.compressed_content != null) {
                data.compressed_content = this.compressed_content;
            }
            if (this.edited != null) {
                data.edited = this.edited.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_teaser)
                writer.writeMessage(1, this.teaser, () => this.teaser.serialize(writer));
            if (this.ltr != false)
                writer.writeBool(2, this.ltr);
            if (this.compressed_content.length)
                writer.writeBytes(3, this.compressed_content);
            if (this.has_edited)
                writer.writeMessage(4, this.edited, () => this.edited.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teaser, () => message.teaser = ContentTeaser.deserialize(reader));
                        break;
                    case 2:
                        message.ltr = reader.readBool();
                        break;
                    case 3:
                        message.compressed_content = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.edited, () => message.edited = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentDetails {
            return ContentDetails.deserialize(bytes);
        }
    }
    export class CategoryTeaser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            slug?: string;
            name?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("slug" in data && data.slug != undefined) {
                    this.slug = data.slug;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get slug() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set slug(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            slug?: string;
            name?: string;
            description?: string;
        }): CategoryTeaser {
            const message = new CategoryTeaser({});
            if (data.slug != null) {
                message.slug = data.slug;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                slug?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.slug != null) {
                data.slug = this.slug;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.slug.length)
                writer.writeString(1, this.slug);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CategoryTeaser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CategoryTeaser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.slug = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CategoryTeaser {
            return CategoryTeaser.deserialize(bytes);
        }
    }
    export class CategoryDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teaser?: CategoryTeaser;
            contents?: ContentTeaser[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teaser" in data && data.teaser != undefined) {
                    this.teaser = data.teaser;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
            }
        }
        get teaser() {
            return pb_1.Message.getWrapperField(this, CategoryTeaser, 1) as CategoryTeaser;
        }
        set teaser(value: CategoryTeaser) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_teaser() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get contents() {
            return pb_1.Message.getRepeatedWrapperField(this, ContentTeaser, 2) as ContentTeaser[];
        }
        set contents(value: ContentTeaser[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            teaser?: ReturnType<typeof CategoryTeaser.prototype.toObject>;
            contents?: ReturnType<typeof ContentTeaser.prototype.toObject>[];
        }): CategoryDetails {
            const message = new CategoryDetails({});
            if (data.teaser != null) {
                message.teaser = CategoryTeaser.fromObject(data.teaser);
            }
            if (data.contents != null) {
                message.contents = data.contents.map(item => ContentTeaser.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                teaser?: ReturnType<typeof CategoryTeaser.prototype.toObject>;
                contents?: ReturnType<typeof ContentTeaser.prototype.toObject>[];
            } = {};
            if (this.teaser != null) {
                data.teaser = this.teaser.toObject();
            }
            if (this.contents != null) {
                data.contents = this.contents.map((item: ContentTeaser) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_teaser)
                writer.writeMessage(1, this.teaser, () => this.teaser.serialize(writer));
            if (this.contents.length)
                writer.writeRepeatedMessage(2, this.contents, (item: ContentTeaser) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CategoryDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CategoryDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teaser, () => message.teaser = CategoryTeaser.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.contents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ContentTeaser.deserialize(reader), ContentTeaser));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CategoryDetails {
            return CategoryDetails.deserialize(bytes);
        }
    }
}
