/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: stats/helpers.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace messages {
    export class LatestDiscordStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_members?: number;
            new_members?: number;
            new_members_period_days?: number;
            join_avg_sec?: number;
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_members" in data && data.total_members != undefined) {
                    this.total_members = data.total_members;
                }
                if ("new_members" in data && data.new_members != undefined) {
                    this.new_members = data.new_members;
                }
                if ("new_members_period_days" in data && data.new_members_period_days != undefined) {
                    this.new_members_period_days = data.new_members_period_days;
                }
                if ("join_avg_sec" in data && data.join_avg_sec != undefined) {
                    this.join_avg_sec = data.join_avg_sec;
                }
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get total_members() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total_members(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_members() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set new_members(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_members_period_days() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set new_members_period_days(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get join_avg_sec() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set join_avg_sec(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            total_members?: number;
            new_members?: number;
            new_members_period_days?: number;
            join_avg_sec?: number;
            valid?: boolean;
        }): LatestDiscordStats {
            const message = new LatestDiscordStats({});
            if (data.total_members != null) {
                message.total_members = data.total_members;
            }
            if (data.new_members != null) {
                message.new_members = data.new_members;
            }
            if (data.new_members_period_days != null) {
                message.new_members_period_days = data.new_members_period_days;
            }
            if (data.join_avg_sec != null) {
                message.join_avg_sec = data.join_avg_sec;
            }
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                total_members?: number;
                new_members?: number;
                new_members_period_days?: number;
                join_avg_sec?: number;
                valid?: boolean;
            } = {};
            if (this.total_members != null) {
                data.total_members = this.total_members;
            }
            if (this.new_members != null) {
                data.new_members = this.new_members;
            }
            if (this.new_members_period_days != null) {
                data.new_members_period_days = this.new_members_period_days;
            }
            if (this.join_avg_sec != null) {
                data.join_avg_sec = this.join_avg_sec;
            }
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total_members != 0)
                writer.writeUint32(1, this.total_members);
            if (this.new_members != 0)
                writer.writeUint32(2, this.new_members);
            if (this.new_members_period_days != 0)
                writer.writeUint32(3, this.new_members_period_days);
            if (this.join_avg_sec != 0)
                writer.writeFloat(4, this.join_avg_sec);
            if (this.valid != false)
                writer.writeBool(5, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatestDiscordStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatestDiscordStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total_members = reader.readUint32();
                        break;
                    case 2:
                        message.new_members = reader.readUint32();
                        break;
                    case 3:
                        message.new_members_period_days = reader.readUint32();
                        break;
                    case 4:
                        message.join_avg_sec = reader.readFloat();
                        break;
                    case 5:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LatestDiscordStats {
            return LatestDiscordStats.deserialize(bytes);
        }
    }
    export class LatestYoutubeStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscribers?: number;
            views?: number;
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscribers" in data && data.subscribers != undefined) {
                    this.subscribers = data.subscribers;
                }
                if ("views" in data && data.views != undefined) {
                    this.views = data.views;
                }
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get subscribers() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set subscribers(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get views() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set views(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            subscribers?: number;
            views?: number;
            valid?: boolean;
        }): LatestYoutubeStats {
            const message = new LatestYoutubeStats({});
            if (data.subscribers != null) {
                message.subscribers = data.subscribers;
            }
            if (data.views != null) {
                message.views = data.views;
            }
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                subscribers?: number;
                views?: number;
                valid?: boolean;
            } = {};
            if (this.subscribers != null) {
                data.subscribers = this.subscribers;
            }
            if (this.views != null) {
                data.views = this.views;
            }
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subscribers != 0)
                writer.writeUint64(1, this.subscribers);
            if (this.views != 0)
                writer.writeUint64(2, this.views);
            if (this.valid != false)
                writer.writeBool(3, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatestYoutubeStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatestYoutubeStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subscribers = reader.readUint64();
                        break;
                    case 2:
                        message.views = reader.readUint64();
                        break;
                    case 3:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LatestYoutubeStats {
            return LatestYoutubeStats.deserialize(bytes);
        }
    }
    export class LatestGithubStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contributors?: number;
            commits?: number;
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contributors" in data && data.contributors != undefined) {
                    this.contributors = data.contributors;
                }
                if ("commits" in data && data.commits != undefined) {
                    this.commits = data.commits;
                }
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get contributors() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set contributors(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get commits() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set commits(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            contributors?: number;
            commits?: number;
            valid?: boolean;
        }): LatestGithubStats {
            const message = new LatestGithubStats({});
            if (data.contributors != null) {
                message.contributors = data.contributors;
            }
            if (data.commits != null) {
                message.commits = data.commits;
            }
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                contributors?: number;
                commits?: number;
                valid?: boolean;
            } = {};
            if (this.contributors != null) {
                data.contributors = this.contributors;
            }
            if (this.commits != null) {
                data.commits = this.commits;
            }
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contributors != 0)
                writer.writeUint64(1, this.contributors);
            if (this.commits != 0)
                writer.writeUint64(2, this.commits);
            if (this.valid != false)
                writer.writeBool(3, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatestGithubStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatestGithubStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contributors = reader.readUint64();
                        break;
                    case 2:
                        message.commits = reader.readUint64();
                        break;
                    case 3:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LatestGithubStats {
            return LatestGithubStats.deserialize(bytes);
        }
    }
}
